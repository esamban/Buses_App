{"remainingRequest":"C:\\Users\\esam bn\\Desktop\\drizzle-vue\\vapp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\esam bn\\Desktop\\drizzle-vue\\vapp\\src\\AddGoogleMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\esam bn\\Desktop\\drizzle-vue\\vapp\\src\\AddGoogleMap.vue","mtime":1629130821796},{"path":"C:\\Users\\esam bn\\Desktop\\drizzle-vue\\vapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\esam bn\\Desktop\\drizzle-vue\\vapp\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\esam bn\\Desktop\\drizzle-vue\\vapp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\esam bn\\Desktop\\drizzle-vue\\vapp\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport LicenseShow from './LicenseShowCompany.vue';\r\n\r\nexport default {\r\n  name: \"AddGoogleMap\",\r\n  components: {\r\n  LicenseShow\r\n  },\r\n  data() {\r\n    return {\r\n      center: { \r\n        lat: 39.7837304,\r\n        lng: -100.4458825\r\n      },\r\n      locationMarkers: [],\r\n      locPlaces: [],\r\n      existingPlace: null\r\n    };\r\n  },\r\n \r\n  mounted() {\r\n    this.locateGeoLocation();\r\n  },\r\n \r\n  methods: {\r\n    initMarker(loc) {\r\n      this.existingPlace = loc;\r\n    },\r\n    addLocationMarker() {\r\n      if (this.existingPlace) {\r\n        const marker = {\r\n          lat: this.existingPlace.geometry.location.lat(),\r\n          lng: this.existingPlace.geometry.location.lng()\r\n        };\r\n        this.locationMarkers.push({ position: marker });\r\n        this.locPlaces.push(this.existingPlace);\r\n        this.center = marker;\r\n        this.existingPlace = null;\r\n      }\r\n    },\r\n    locateGeoLocation: function() {\r\n      navigator.geolocation.getCurrentPosition(res => {\r\n        this.center = {\r\n          lat: res.coords.latitude,\r\n          lng: res.coords.longitude\r\n        };\r\n      });\r\n    }\r\n  }\r\n};\r\n",{"version":3,"sources":["AddGoogleMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AddGoogleMap.vue","sourceRoot":"src","sourcesContent":["<template>\r\n  <div>\r\n    <div>\r\n      <h2>Vue Js Search and Add Marker</h2>\r\n\r\n      <label>\r\n        <gmap-autocomplete @place_changed=\"initMarker\"></gmap-autocomplete>\r\n\r\n        <button @click=\"addLocationMarker\">Add</button>\r\n      </label>\r\n      <br/>\r\n \r\n    </div>\r\n    <br>\r\n    <gmap-map\r\n        :zoom=\"14\"    \r\n        :center=\"center\"\r\n        style=\"width:100%;  height: 600px;\"\r\n      >\r\n      <gmap-marker\r\n        :key=\"index\"\r\n        v-for=\"(m, index) in locationMarkers\"\r\n        :position=\"m.position\"\r\n        @click=\"center=m.position\"\r\n      >\r\n      </gmap-marker>\r\n      \r\n    </gmap-map>\r\n     \r\n  </div>\r\n</template>\r\n \r\n<script>\r\nimport LicenseShow from './LicenseShowCompany.vue';\r\n\r\nexport default {\r\n  name: \"AddGoogleMap\",\r\n  components: {\r\n  LicenseShow\r\n  },\r\n  data() {\r\n    return {\r\n      center: { \r\n        lat: 39.7837304,\r\n        lng: -100.4458825\r\n      },\r\n      locationMarkers: [],\r\n      locPlaces: [],\r\n      existingPlace: null\r\n    };\r\n  },\r\n \r\n  mounted() {\r\n    this.locateGeoLocation();\r\n  },\r\n \r\n  methods: {\r\n    initMarker(loc) {\r\n      this.existingPlace = loc;\r\n    },\r\n    addLocationMarker() {\r\n      if (this.existingPlace) {\r\n        const marker = {\r\n          lat: this.existingPlace.geometry.location.lat(),\r\n          lng: this.existingPlace.geometry.location.lng()\r\n        };\r\n        this.locationMarkers.push({ position: marker });\r\n        this.locPlaces.push(this.existingPlace);\r\n        this.center = marker;\r\n        this.existingPlace = null;\r\n      }\r\n    },\r\n    locateGeoLocation: function() {\r\n      navigator.geolocation.getCurrentPosition(res => {\r\n        this.center = {\r\n          lat: res.coords.latitude,\r\n          lng: res.coords.longitude\r\n        };\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>"]}]}